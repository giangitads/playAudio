{"version":3,"sources":["components/AudioItem/index.js","firebaseConnect.js","components/FormUploadAudio/index.js","App.js","serviceWorker.js","index.js"],"names":["AudioItem","props","audio","index","audioIndex","className","onClick","selectAudio","src","image","alt","title","artist","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","storage","dataFirebase","ref","FormUploadAudio","closeFormUpload","e","target","name","setState","files","value","uploadFileAudio","fileAudio","state","put","on","snapshot","progressFileAudio","Math","round","bytesTransferred","totalBytes","error","console","log","child","getDownloadURL","then","urlFileAudio","Swal","fire","uploadFileImage","fileImage","progressFileImage","urlFileImage","submitFileAudio","artistAudio","nameAudio","push","this","isOpenFormUpload","id","type","accept","onChange","max","TextField","label","Button","variant","PureComponent","App","audioRef","useRef","useState","setAudioIndex","audios","setAudios","currentTime","setCurrentTime","duration","setDuration","isPlay","setPlay","isOpenSideBar","setOpenSideBar","setOpenFormUpload","useEffect","a","once","res","listKeys","Object","keys","val","listValues","values","map","item","err","alert","getAudiosFromFirebase","deleteAudio","remove","lengthAudios","length","nextAudio","current","pause","play","cTimeMinute","floor","cTimeSecond","dTimeMinute","dTimeSecond","cTime","dTime","renderTime","axis","xmax","x","styles","track","backgroundColor","height","active","thumb","marginTop","width","borderRadius","onLoadedData","onTimeUpdate","onEnded","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.15abffc5.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"./style.css\";\r\n// import DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nconst AudioItem = (props) => {\r\n    const { audio, index, audioIndex} = props;\r\n    const selectAudio = () => {\r\n        props.selectAudio(index);\r\n    }\r\n    // const deleteAudio = (id) => {\r\n    //     const { deleteAudio } = props;\r\n    //     deleteAudio(id);\r\n    // }\r\n    \r\n    return (\r\n        <div>\r\n            <div className={`audio-item ${audioIndex === index ? \"playing\" : \"\" }`} onClick={selectAudio} >\r\n                <img src={audio.image} alt=\"audio item\" />\r\n                <p>{audio.title + \" - \" + audio.artist}</p>\r\n                {/* <span className=\"delete-audio\" >\r\n                    <DeleteIcon onClick={()=>deleteAudio(audio.id)} />\r\n                </span> */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default AudioItem;","import * as firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDcOXcWQ4-KGCxoqH7xMXE1S7SQeAYFpuc\",\r\n    authDomain: \"reactjs-player.firebaseapp.com\",\r\n    databaseURL: \"https://reactjs-player.firebaseio.com\",\r\n    projectId: \"reactjs-player\",\r\n    storageBucket: \"reactjs-player.appspot.com\",\r\n    messagingSenderId: \"959377545174\",\r\n    appId: \"1:959377545174:web:8b63c8f6335d80fb40f677\",\r\n    measurementId: \"G-KFMF93KSK2\",\r\n};\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst storage = firebase.storage();\r\n\r\nexport { storage, firebaseConfig as default };\r\n","import React, { PureComponent } from \"react\";\r\nimport * as firebase from \"firebase\";\r\nimport \"./style.css\";\r\nimport { storage } from \"../../firebaseConnect\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\r\nimport Swal from \"sweetalert2\";\r\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\r\n\r\nconst dataFirebase = firebase.database().ref(\"audios\");\r\n\r\nexport default class FormUploadAudio extends PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            fileAudio: null,\r\n            fileImage: null,\r\n            nameAudio: null,\r\n            artistAudio: null,\r\n            urlFileAudio: null,\r\n            urlFileImage: null,\r\n            progressFileAudio: 0,\r\n            progressFileImage: 0,\r\n        };\r\n    }\r\n\r\n    closeFormUpload = () => {\r\n        this.props.closeFormUpload();\r\n    };\r\n\r\n    selectAudio = (e) => {\r\n        if (e.target.name === \"fileAudio\" || e.target.name === \"fileImage\") {\r\n            this.setState({\r\n                [e.target.name]: e.target.files[0],\r\n            });\r\n        } else {\r\n            this.setState({\r\n                [e.target.name]: e.target.value,\r\n            });\r\n        }\r\n    };\r\n\r\n    uploadFileAudio = () => {\r\n        const { fileAudio } = this.state;\r\n        if (!fileAudio) {\r\n            Swal.fire(\"Hãy chọn file mp4 !\", \"\", \"error\");\r\n        } else {\r\n            const upload = storage\r\n                .ref(`Audios/${fileAudio.name}`)\r\n                .put(fileAudio);\r\n            upload.on(\r\n                \"state_changed\",\r\n                (snapshot) => {\r\n                    //progress\r\n                    const progressFileAudio = Math.round(\r\n                        (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n                    );\r\n                    this.setState({ progressFileAudio });\r\n                },\r\n                (error) => {\r\n                    console.log(error);\r\n                },\r\n                () => {\r\n                    //complete\r\n                    storage\r\n                        .ref(`Audios`)\r\n                        .child(fileAudio.name)\r\n                        .getDownloadURL()\r\n                        .then((urlFileAudio) => {\r\n                            this.setState({ urlFileAudio });\r\n                        });\r\n                }\r\n            );\r\n        }\r\n    };\r\n    uploadFileImage = () => {\r\n        const { fileImage } = this.state;\r\n        if (!fileImage) {\r\n            Swal.fire(\"Hãy chọn file mp4 !\", \"\", \"error\");\r\n        } else {\r\n            const upload = storage\r\n                .ref(`Images/${fileImage.name}`)\r\n                .put(fileImage);\r\n            upload.on(\r\n                \"state_changed\",\r\n                (snapshot) => {\r\n                    //progress\r\n                    const progressFileImage = Math.round(\r\n                        (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n                    );\r\n                    this.setState({ progressFileImage });\r\n                },\r\n                (error) => {\r\n                    console.log(error);\r\n                },\r\n                () => {\r\n                    //complete\r\n                    storage\r\n                        .ref(`Images`)\r\n                        .child(fileImage.name)\r\n                        .getDownloadURL()\r\n                        .then((urlFileImage) => {\r\n                            this.setState({ urlFileImage });\r\n                        });\r\n                }\r\n            );\r\n        }\r\n    };\r\n\r\n    submitFileAudio = () => {\r\n        const {\r\n            urlFileAudio,\r\n            urlFileImage,\r\n            artistAudio,\r\n            nameAudio,\r\n        } = this.state;\r\n        if (!urlFileAudio || !urlFileImage) {\r\n            Swal.fire(\"Bạn hãy upload file mp4 và image trước !\", \"\", \"error\");\r\n        } else if (!artistAudio || !nameAudio) {\r\n            Swal.fire(\"Bạn hãy nhập đầy đủ thông tin bài hát !\", \"\", \"error\");\r\n        } else {\r\n            this.closeFormUpload();\r\n            dataFirebase.push({\r\n                src: urlFileAudio,\r\n                image: urlFileImage,\r\n                title: nameAudio,\r\n                artist: artistAudio,\r\n            });\r\n            Swal.fire(\"Upload Audio thành công !\", \"\", \"success\");\r\n        }\r\n    };\r\n    render() {\r\n        const { progressFileAudio, progressFileImage } = this.state;\r\n        const { isOpenFormUpload } = this.props;\r\n        return (\r\n            <div\r\n                className={`form-upload-audio ${\r\n                    isOpenFormUpload ? \"open\" : \"\"\r\n                }`}\r\n            >\r\n                <div className=\"icon-close-form\">\r\n                    <HighlightOffIcon onClick={this.closeFormUpload} />\r\n                </div>\r\n                <p>Upload Audio</p>\r\n                <div className=\"input-file\">\r\n                    <span>Audio</span>\r\n                    <input\r\n                        id=\"fileAudio\"\r\n                        type=\"file\"\r\n                        name=\"fileAudio\"\r\n                        accept=\".mp3\"\r\n                        onChange={this.selectAudio}\r\n                    />\r\n                    <span>\r\n                        <CloudUploadIcon onClick={this.uploadFileAudio} />\r\n                    </span>\r\n                </div>\r\n                <progress value={progressFileAudio} max=\"100\" />\r\n                <div className=\"input-file\">\r\n                    <span>Image</span>\r\n                    <input\r\n                        id=\"fileImage\"\r\n                        type=\"file\"\r\n                        name=\"fileImage\"\r\n                        onChange={this.selectAudio}\r\n                        accept=\".jpg\"\r\n                    />\r\n                    <span>\r\n                        <CloudUploadIcon onClick={this.uploadFileImage} />\r\n                    </span>\r\n                </div>\r\n                <progress value={progressFileImage} max=\"100\" />\r\n                <div>\r\n                    <TextField\r\n                        label=\"Name Audio\"\r\n                        name=\"nameAudio\"\r\n                        onChange={this.selectAudio}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        label=\"Artist Audio\"\r\n                        name=\"artistAudio\"\r\n                        onChange={this.selectAudio}\r\n                    />\r\n                </div>\r\n                <Button onClick={this.submitFileAudio} variant=\"contained\">\r\n                    <CloudUploadIcon />\r\n                    Upload\r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import PauseCircleOutlineIcon from \"@material-ui/icons/PauseCircleOutline\";\r\nimport PlayCircleOutlineIcon from \"@material-ui/icons/PlayCircleOutline\";\r\nimport SkipNextIcon from \"@material-ui/icons/SkipNext\";\r\nimport SkipPreviousIcon from \"@material-ui/icons/SkipPrevious\";\r\nimport React, { useRef, useState, useEffect } from \"react\";\r\nimport TimeSlider from \"react-input-slider\";\r\nimport \"./App.css\";\r\nimport MenuOpenIcon from \"@material-ui/icons/MenuOpen\";\r\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\r\nimport AudioItem from \"./components/AudioItem\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport FormUploadAudio from \"./components/FormUploadAudio\";\r\n\r\nimport * as firebase from \"firebase\";\r\nimport \"./firebaseConnect\";\r\nconst dataFirebase = firebase.database().ref(\"audios\");\r\n\r\nconst App = () => {\r\n    const audioRef = useRef();\r\n    const [audioIndex, setAudioIndex] = useState(0);\r\n    const [audios, setAudios] = useState([\r\n        {\r\n            src: \"\",\r\n            image:\r\n                \"https://nicolasbrugneaux.me/web-player-react/dist/img/default.png\",\r\n            title: \"Vui lòng chờ !\",\r\n            artist: \"Đang tải dữ liệu\",\r\n        },\r\n    ]);\r\n    const [currentTime, setCurrentTime] = useState(0);\r\n    const [duration, setDuration] = useState(0);\r\n    const [isPlay, setPlay] = useState(false);\r\n    const [isOpenSideBar, setOpenSideBar] = useState(true);\r\n    const [isOpenFormUpload, setOpenFormUpload] = useState(false);\r\n\r\n    useEffect(() => {\r\n        //Get data audios from Firebase\r\n        async function getAudiosFromFirebase() {\r\n            try {\r\n                dataFirebase.once(\"value\").then((res) => {\r\n                    const audios = [];\r\n                    const listKeys = Object.keys(res.val() || {});\r\n                    const listValues = Object.values(res.val() || {});\r\n                    listKeys.map((item, index) => {\r\n                        listValues[index].id = item;\r\n                        audios.push(listValues[index]);\r\n                        return audios;\r\n                    });\r\n                    if (audios) {\r\n                        setAudios(audios);\r\n                    }\r\n                });\r\n            } catch (err) {\r\n                alert(err);\r\n            }\r\n        }\r\n        getAudiosFromFirebase();\r\n    });\r\n    const handleLoadedData = () => {\r\n        setDuration(audioRef.current.duration);\r\n        if (isPlay) audioRef.current.play();\r\n    };\r\n\r\n    const handlePausePlayClick = () => {\r\n        if (isPlay) {\r\n            audioRef.current.pause();\r\n        } else {\r\n            audioRef.current.play();\r\n        }\r\n        setPlay(!isPlay);\r\n    };\r\n\r\n    const handleTimeSliderChange = ({ x }) => {\r\n        audioRef.current.currentTime = x;\r\n        setCurrentTime(x);\r\n\r\n        if (!isPlay) {\r\n            setPlay(true);\r\n            audioRef.current.play();\r\n        }\r\n    };\r\n    const deleteAudio = (id) => {\r\n        dataFirebase.child(id).remove();\r\n    };\r\n    const lengthAudios = audios.length;\r\n    const renderAudioItem = () => {\r\n        let xhtml = null;\r\n        xhtml = audios.map((audio, index) => {\r\n            return (\r\n                <AudioItem\r\n                    key={index}\r\n                    index={index}\r\n                    audio={audio}\r\n                    selectAudio={() => {\r\n                        selectAudio(index);\r\n                    }}\r\n                    audioIndex={audioIndex}\r\n                    deleteAudio={deleteAudio}\r\n                />\r\n            );\r\n        });\r\n        return xhtml;\r\n    };\r\n    const selectAudio = (index) => {\r\n        setAudioIndex(index);\r\n    };\r\n\r\n    const closeFormUpload = () => {\r\n        setOpenFormUpload(false);\r\n    };\r\n\r\n    const previousAudio = () => {\r\n        if (audioIndex === 0) setAudioIndex(lengthAudios - 1);\r\n        else setAudioIndex(audioIndex - 1);\r\n    };\r\n\r\n    const nextAudio = () => {\r\n        if (audioIndex === lengthAudios - 1) setAudioIndex(0);\r\n        else setAudioIndex(audioIndex + 1);\r\n    };\r\n\r\n    const renderTime = () => {\r\n        let xhtml = null;\r\n        let cTimeMinute = Math.floor(currentTime / 60);\r\n        let cTimeSecond = Math.floor(currentTime % 60);\r\n        let dTimeMinute = Math.floor(duration / 60);\r\n        let dTimeSecond = Math.floor(duration % 60);\r\n        let cTime = `${cTimeMinute} : ${\r\n            cTimeSecond < 10 ? `0${cTimeSecond}` : `${cTimeSecond}`\r\n        }`;\r\n        let dTime = `${dTimeMinute} : ${\r\n            dTimeSecond < 10 ? `0${dTimeSecond}` : `${dTimeSecond}`\r\n        }`;\r\n        xhtml = `${cTime} / ${dTime}`;\r\n        return xhtml;\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"audio\">\r\n                <div className=\"background\"></div>\r\n                {/* eslint-disable-next-line jsx-a11y/img-redundant-alt */}\r\n                <img\r\n                    className={`Song-Thumbnail ${\r\n                        isPlay ? \"playAudio\" : \"pauseAudio\"\r\n                    }`}\r\n                    src={audios[audioIndex].image}\r\n                    alt=\"image\"\r\n                />\r\n                <h2 className=\"Song-Title\">{audios[audioIndex].title}</h2>\r\n                <p className=\"Singer\">{audios[audioIndex].artist}</p>\r\n                <div className=\"Control-Button-Group\">\r\n                    <div\r\n                        className=\"Prev-Button\"\r\n                        onClick={() => {\r\n                            previousAudio();\r\n                        }}\r\n                    >\r\n                        <SkipPreviousIcon />\r\n                    </div>\r\n                    <div\r\n                        className=\"Pause-Play-Button\"\r\n                        onClick={handlePausePlayClick}\r\n                    >\r\n                        {isPlay ? (\r\n                            <PauseCircleOutlineIcon />\r\n                        ) : (\r\n                            <PlayCircleOutlineIcon />\r\n                        )}\r\n                    </div>\r\n                    <div\r\n                        className=\"Next-Button\"\r\n                        onClick={() => {\r\n                            nextAudio();\r\n                        }}\r\n                    >\r\n                        <SkipNextIcon />\r\n                    </div>\r\n                </div>\r\n                <p className=\"render-time\">{renderTime()}</p>\r\n                <TimeSlider\r\n                    axis=\"x\"\r\n                    xmax={duration}\r\n                    x={currentTime}\r\n                    onChange={handleTimeSliderChange}\r\n                    styles={{\r\n                        track: {\r\n                            backgroundColor: \"#e3e3e3\",\r\n                            height: \"2px\",\r\n                        },\r\n                        active: {\r\n                            backgroundColor: \"#333\",\r\n                            height: \"2px\",\r\n                        },\r\n                        thumb: {\r\n                            marginTop: \"-3px\",\r\n                            width: \"8px\",\r\n                            height: \"8px\",\r\n                            backgroundColor: \"#333\",\r\n                            borderRadius: 0,\r\n                        },\r\n                    }}\r\n                />\r\n                <audio\r\n                    ref={audioRef}\r\n                    src={audios[audioIndex].src}\r\n                    onLoadedData={handleLoadedData}\r\n                    onTimeUpdate={() =>\r\n                        setCurrentTime(audioRef.current.currentTime)\r\n                    }\r\n                    onEnded={() => {\r\n                        nextAudio();\r\n                    }}\r\n                />\r\n            </div>\r\n            {!isOpenSideBar ? (\r\n                <label className=\"open-sidebar\">\r\n                    <MenuOpenIcon\r\n                        onClick={() => {\r\n                            setOpenSideBar(true);\r\n                        }}\r\n                    />\r\n                </label>\r\n            ) : (\r\n                \"\"\r\n            )}\r\n            <div className={`slide-bar ${isOpenSideBar ? \"open\" : \"close\"} `}>\r\n                <label className=\"close-sidebar\">\r\n                    <HighlightOffIcon\r\n                        onClick={() => {\r\n                            setOpenSideBar(false);\r\n                        }}\r\n                    />\r\n                </label>\r\n                <h1>List Audios</h1>\r\n                {renderAudioItem()}\r\n                <div className=\"button-add-audio\">\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        onClick={() => {\r\n                            setOpenFormUpload(true);\r\n                        }}\r\n                    >\r\n                        Upload Audio\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n            <FormUploadAudio\r\n                isOpenFormUpload={isOpenFormUpload}\r\n                closeFormUpload={closeFormUpload}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}